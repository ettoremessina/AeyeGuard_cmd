"""
React-specific vulnerability patterns and detection rules.

Contains patterns, CWE mappings, and descriptions for React/TypeScript vulnerabilities.
"""

from typing import Dict, List, Any
from dataclasses import dataclass


@dataclass
class VulnerabilityPattern:
    """Represents a vulnerability pattern."""
    name: str
    cwe_id: str
    severity: str  # critical, high, medium, low, info
    category: str
    description: str
    patterns: List[str]  # Regex patterns or keywords
    remediation: str


# React/TypeScript vulnerability patterns
REACT_VULNERABILITY_PATTERNS = {
    'dangerously_set_innerhtml': VulnerabilityPattern(
        name='Unsafe use of dangerouslySetInnerHTML',
        cwe_id='CWE-79',
        severity='critical',
        category='XSS',
        description='User-controlled data rendered with dangerouslySetInnerHTML can lead to XSS attacks',
        patterns=[
            r'dangerouslySetInnerHTML\s*=\s*\{\s*\{?\s*__html\s*:',
        ],
        remediation='Use DOMPurify to sanitize HTML or avoid dangerouslySetInnerHTML entirely. '
                   'Consider using React\'s default escaping by rendering text directly.'
    ),

    'eval_usage': VulnerabilityPattern(
        name='Dynamic code execution with eval or Function',
        cwe_id='CWE-95',
        severity='critical',
        category='Code Injection',
        description='Use of eval() or Function() constructor with user input can lead to arbitrary code execution',
        patterns=[
            r'\beval\s*\(',
            r'new\s+Function\s*\(',
        ],
        remediation='Never use eval() or Function() constructor with user input. '
                   'Use safer alternatives like JSON.parse() for data or predefined function maps.'
    ),

    'direct_dom_manipulation': VulnerabilityPattern(
        name='Direct DOM manipulation bypassing React',
        cwe_id='CWE-79',
        severity='high',
        category='XSS',
        description='Direct DOM manipulation with innerHTML/outerHTML bypasses React\'s XSS protection',
        patterns=[
            r'\.innerHTML\s*=',
            r'\.outerHTML\s*=',
            r'document\.write\s*\(',
        ],
        remediation='Use React\'s JSX for rendering. If you must manipulate DOM, use refs and textContent instead of innerHTML.'
    ),

    'localstorage_sensitive_data': VulnerabilityPattern(
        name='Sensitive data stored in localStorage',
        cwe_id='CWE-312',
        severity='high',
        category='Data Exposure',
        description='Storing sensitive data (tokens, passwords) in localStorage is insecure',
        patterns=[
            r'localStorage\.setItem\s*\(\s*["\'](?:token|password|secret|key|credential|auth)',
        ],
        remediation='Use secure, httpOnly cookies for sensitive data. If localStorage is necessary, '
                   'encrypt data before storage and never store passwords or secrets.'
    ),

    'http_url': VulnerabilityPattern(
        name='Insecure HTTP URL',
        cwe_id='CWE-319',
        severity='medium',
        category='Data Exposure',
        description='HTTP URLs transmit data in cleartext, vulnerable to interception',
        patterns=[
            r'["\']http://(?!localhost)[^"\']+["\']',
        ],
        remediation='Use HTTPS for all external API calls. Only use HTTP for local development.'
    ),

    'client_side_auth': VulnerabilityPattern(
        name='Client-side only authentication',
        cwe_id='CWE-602',
        severity='critical',
        category='Authentication',
        description='Authentication logic implemented only on client-side can be bypassed',
        patterns=[
            r'if\s*\(\s*isAuthenticated\s*\)',
            r'if\s*\(\s*user\s*\)',
        ],
        remediation='Always enforce authentication on the server-side. '
                   'Client-side checks are only for UX, never for security.'
    ),

    'hardcoded_secrets': VulnerabilityPattern(
        name='Hardcoded API keys or secrets',
        cwe_id='CWE-798',
        severity='critical',
        category='Sensitive Data',
        description='Hardcoded secrets in frontend code are exposed to all users',
        patterns=[
            r'api[_-]?key\s*[=:]\s*["\'][a-zA-Z0-9]{20,}["\']',
            r'secret\s*[=:]\s*["\'][a-zA-Z0-9]{20,}["\']',
        ],
        remediation='Never hardcode secrets in frontend code. Use environment variables and '
                   'server-side proxies for API calls that require secrets.'
    ),

    'type_assertion_any': VulnerabilityPattern(
        name='Type assertion to any bypassing type safety',
        cwe_id='CWE-20',
        severity='medium',
        category='Input Validation',
        description='Type assertions to "any" remove type safety and can hide security issues',
        patterns=[
            r'\s+as\s+any\b',
            r'<any>',
        ],
        remediation='Avoid "as any" type assertions. Define proper types and use type guards for validation.'
    ),

    'unvalidated_props': VulnerabilityPattern(
        name='Unvalidated props spreading',
        cwe_id='CWE-20',
        severity='medium',
        category='Input Validation',
        description='Spreading unvalidated props can inject unsafe attributes',
        patterns=[
            r'\{\s*\.\.\.\s*(?:props|userProps|unknownProps)',
        ],
        remediation='Validate and whitelist props before spreading. Use TypeScript interfaces to define expected props.'
    ),

    'missing_key_prop': VulnerabilityPattern(
        name='Missing key prop in list rendering',
        cwe_id='CWE-20',
        severity='low',
        category='React Patterns',
        description='Missing key props can cause rendering issues and potential security bypasses',
        patterns=[
            r'\.map\s*\([^)]+\)\s*=>\s*<[^>]+>(?![^<]*key=)',
        ],
        remediation='Always provide unique, stable keys when rendering lists in React.'
    ),

    'console_log_production': VulnerabilityPattern(
        name='Console logging in production',
        cwe_id='CWE-532',
        severity='medium',
        category='Data Exposure',
        description='Console.log statements can expose sensitive data in production',
        patterns=[
            r'console\.log\s*\(',
            r'console\.warn\s*\(',
            r'console\.error\s*\(',
        ],
        remediation='Remove console.log statements before production deployment. '
                   'Use proper logging libraries that can be disabled in production.'
    ),

    'open_redirect': VulnerabilityPattern(
        name='Open redirect vulnerability',
        cwe_id='CWE-601',
        severity='high',
        category='Redirect',
        description='Redirecting to user-controlled URLs can be used for phishing',
        patterns=[
            r'window\.location\s*=\s*(?:props|params|query)',
            r'navigate\s*\(\s*(?:props|params|query)',
        ],
        remediation='Validate and whitelist redirect URLs. Never redirect to user-controlled input directly.'
    ),

    'react_refs_unsafe': VulnerabilityPattern(
        name='Unsafe use of React refs with user input',
        cwe_id='CWE-79',
        severity='high',
        category='XSS',
        description='Using refs to manipulate DOM with user input can bypass React\'s XSS protection',
        patterns=[
            r'ref\.current\.\w+\s*=\s*(?:props|user|input)',
        ],
        remediation='Avoid using refs for DOM manipulation with user input. Use React state and JSX instead.'
    ),

    'useeffect_missing_deps': VulnerabilityPattern(
        name='useEffect with missing dependencies',
        cwe_id='CWE-362',
        severity='medium',
        category='React Hooks',
        description='Missing dependencies in useEffect can cause stale closures and race conditions',
        patterns=[
            r'useEffect\s*\([^,]+,\s*\[\s*\]\s*\)',
        ],
        remediation='Include all dependencies used in useEffect. Use ESLint react-hooks plugin to detect missing dependencies.'
    ),
}


def get_pattern_by_name(name: str) -> VulnerabilityPattern:
    """Get vulnerability pattern by name."""
    return REACT_VULNERABILITY_PATTERNS.get(name)


def get_all_patterns() -> Dict[str, VulnerabilityPattern]:
    """Get all vulnerability patterns."""
    return REACT_VULNERABILITY_PATTERNS


def get_patterns_by_category(category: str) -> List[VulnerabilityPattern]:
    """Get all patterns in a specific category."""
    return [p for p in REACT_VULNERABILITY_PATTERNS.values() if p.category == category]


def get_patterns_by_severity(severity: str) -> List[VulnerabilityPattern]:
    """Get all patterns with specific severity."""
    return [p for p in REACT_VULNERABILITY_PATTERNS.values() if p.severity == severity]


# CWE mapping for reference
CWE_DESCRIPTIONS = {
    'CWE-79': 'Cross-site Scripting (XSS)',
    'CWE-95': 'Improper Neutralization of Directives in Dynamically Evaluated Code',
    'CWE-312': 'Cleartext Storage of Sensitive Information',
    'CWE-319': 'Cleartext Transmission of Sensitive Information',
    'CWE-602': 'Client-Side Enforcement of Server-Side Security',
    'CWE-798': 'Use of Hard-coded Credentials',
    'CWE-20': 'Improper Input Validation',
    'CWE-532': 'Insertion of Sensitive Information into Log File',
    'CWE-601': 'URL Redirection to Untrusted Site',
    'CWE-362': 'Concurrent Execution using Shared Resource with Improper Synchronization',
}


def get_cwe_description(cwe_id: str) -> str:
    """Get description for CWE ID."""
    return CWE_DESCRIPTIONS.get(cwe_id, 'Unknown CWE')
